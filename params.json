{
  "name": "GoRT",
  "tagline": "Realtime extensions for the Go programming language",
  "body": "# Go Realtime Extensions Project Page\r\n\r\n## Realtime Application Requirements\r\n\r\n### Definitions\r\n\r\n* __Resolution:__ The smallest representable unit of a measurement\r\n\r\n* __Accuracy:__ The smallest repeatable unit of measurement\r\n\r\n* __Latency:__ The time elapsed from some time T when an event has actually occured till when it is acknowledge as having occured\r\n\r\n* __Jitter:__ The deviation from true periodicity of a presumed periodic event\r\n\r\n## Linux and Realtime Applications\r\n\r\n### Design Goals of Linux\r\n\r\n### PREEMPT-RT Patch\r\n\r\n### User-Level Threads Approach\r\n\r\n## Go Language Overview\r\n\r\n### Basics\r\n\r\n### Realtime Extensions\r\n\r\n### Current Progress\r\n\r\n## Realtime Performance Analysis\r\n\r\n### Linux with PREEMPT-RT Patch\r\n\r\nAs stated in Realtime requirements section, one of the most important factors and\r\nconsiderations in determining if a realtime platform can adequately perform a real-time application is scheduling latency. To obtain these figures we use the de facto standard utility for Linux, [`cyclictest`][cyclictest-link], for obtaining scheduling latencies. The `cyclictest` utility measures the latency from when a timer expires until when the thread that set the timer is executed. A modified version of this utility is in the works to measure the latency from when a GPIO triggered interrupt is fired till when the servicing thread (not the ISR) is executing.\r\n\r\nThe results below show that the best case scenario is about a 7 us latency. However, this best case scenario is often meaningless to us in respect to what can be achecieved on a system. The average case is about XX us with a worst case of YY us. This worst case roughly equates to the jitter around either the minimium or average case. With this in mind, we can see that the scheduling latency that must be accounted for in this system would be YY us. If this value is tolerable for the application, it can be added onto the worst-case execution time of a task to account for it in various scheduling alogorithms such as cyclic executive, EDF, and etc... However, it should be worth noting that this value of YY also drives what the minimium period of a task could be on this platform.\r\n\r\n```bash\r\n# The test is run 10 times in a loop to obtain more data points and verify\r\n# repeatable results\r\n#\r\n# -l 100000       - runs the test 100,000 times\r\n# -t              - schedules 1 thread per CPU\r\n# -p 99\t          - sets the thread priority to 99\r\n# -n\t          - uses clock_nanosleep\r\n# -q\t          - supresses output until test is completed\r\n# --policy=normal - uses SCHED_NORMAL instead of the default SHED_FIFO\r\n#                   scheduler class for the test\r\n\r\necho '---------    cyclictest -t -p 99 -n -l 100000 -q    -----------'\r\nfor i in `seq 1 10`; do cyclictest -t -p 99 -n -l 100000 -q; done\r\necho '---------    cyclictest -t --policy=normal -n -l 100000 -q    -----------'\r\nfor i in `seq 1 10`; do cyclictest -t --policy=normal -n -l 100000 -q; done\r\n```\r\n\r\n```\r\nOutput of the above test script\r\n\r\n---------    cyclictest -t -p 99 -n -l 100000 -q    -----------\r\nT: 0 (17266) P:99 I:1000 C: 100000 Min:   8 Act:   14 Avg:   11 Max:   55\r\nT: 0 (17268) P:99 I:1000 C: 100000 Min:   8 Act:   10 Avg:   11 Max:   62\r\nT: 0 (17270) P:99 I:1000 C: 100000 Min:   7 Act:   10 Avg:   11 Max:   56\r\nT: 0 (17272) P:99 I:1000 C: 100000 Min:   7 Act:   10 Avg:   11 Max:   56\r\nT: 0 (17274) P:99 I:1000 C: 100000 Min:   7 Act:   14 Avg:   11 Max:   63\r\nT: 0 (17276) P:99 I:1000 C: 100000 Min:   8 Act:   10 Avg:   11 Max:   61\r\nT: 0 (17278) P:99 I:1000 C: 100000 Min:   7 Act:   10 Avg:   11 Max:   54\r\nT: 0 (17281) P:99 I:1000 C: 100000 Min:   7 Act:   10 Avg:   11 Max:   57\r\nT: 0 (17283) P:99 I:1000 C: 100000 Min:   7 Act:   10 Avg:   11 Max:   53\r\nT: 0 (17285) P:99 I:1000 C: 100000 Min:   7 Act:   11 Avg:   11 Max:   49\r\n---------    cyclictest -t --policy=normal -n -l 100000 -q    -----------\r\nT: 0 (17389) P: 0 I:1000 C: 100000 Min:     17 Act:   62 Avg:   65 Max:    6120\r\nT: 0 (17393) P: 0 I:1000 C: 100000 Min:     18 Act:   64 Avg:   63 Max:   11913\r\nT: 0 (17399) P: 0 I:1000 C: 100000 Min:     18 Act:   61 Avg:   63 Max:   12568\r\nT: 0 (17402) P: 0 I:1000 C: 100000 Min:     17 Act:   62 Avg:   63 Max:    3939\r\nT: 0 (17406) P: 0 I:1000 C: 100000 Min:     18 Act:   63 Avg:   63 Max:   11342\r\nT: 0 (17408) P: 0 I:1000 C: 100000 Min:     18 Act:   62 Avg:   63 Max:    6724\r\n```\r\n\r\n### Go Language\r\n\r\nCurrently porting `cyclictest` to Go\r\n\r\n### Go Language with Realtime Extensions\r\n\r\nCurrently porting `cyclictest` to Go-RT\r\n\r\n[cyclictest-link]: https://rt.wiki.kernel.org/index.php/Cyclictest\r\n[golang-link]: https://golang.org\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}